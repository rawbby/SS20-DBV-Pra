#  Copyright (c) 2020 Robert Andreas Fritsch
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.

import os

import numpy as np
from PySide2.QtCore import QUrl
from PySide2.QtWidgets import QMainWindow, QFileDialog, QWidget

from dbvpra.gui.Ui_window import Ui_window
from dbvpra.segmentation import nn_segmentation_from_masks


def res_dir_path() -> str:
    return os.path.join(os.path.dirname(__file__), "res")


def fwd_open_file_path(open_file_path_consumer, parent: QWidget):
    dir_path = res_dir_path()
    image_url: QUrl = QFileDialog.getOpenFileUrl(parent, dir=QUrl(dir_path))[0]
    if image_url.isLocalFile():
        open_file_path_consumer(image_url.path()[1:])


def fwd_save_file_path(save_file_path_consumer, parent: QWidget):
    dir_path = res_dir_path()
    image_url: QUrl = QFileDialog.getSaveFileUrl(parent, dir=QUrl(dir_path))[0]
    if image_url.isLocalFile():
        save_file_path_consumer(image_url.path()[1:])


# naming convention by Ui_Window which is generated by pyside2-uic
# noinspection PyPep8Naming,PyMethodMayBeStatic,PyUnusedLocal
class Control_window:

    def setupControl(self, ui: Ui_window, window: QMainWindow):
        kernel_size = 3

        def on_inpaint(checked):
            # TODO implement

            # iw = ui.merge._image.width()
            # ih = ui.merge._image.height()

            # fx = ui.merge._foreign_pos.x()
            # fy = ui.merge._foreign_pos.y()
            # fw = ui.merge._foreign.width()
            # fh = ui.merge._foreign.height()

            # x = max(0, fx)
            # y = max(0, fy)
            # w = min(iw, fx + fw) - x
            # h = min(ih, fy + fh) - y

            # image = q_image_to_np_image(ui.merge._image)[x:w + x, y:h + y]
            # foreign = q_image_to_np_image(ui.merge._foreign)[x:w + x, y:h + y]
            # mask = alpha_view(ui.merge._foreign)[x:w + x, y:h + y].reshape(w, h)

            # self._poisson = poisson(image, foreign, mask)
            # self._poisson_calculated = True

            return

        def on_embed(checked):
            np_mask = ui.scribble.canvas_primary_mask()
            np_mask = np_mask.reshape(np_mask.shape + (1,))

            np_foreign = ui.scribble.picture_rgb_image()

            np_foreign = np.dstack((np_foreign, np_mask))
            ui.merge.foreign_set_foreign(np_foreign)

        def on_smart_segment(checked):
            image = ui.scribble.picture_rgb_image()
            keep = ui.scribble.canvas_primary_mask()
            dump = ui.scribble.canvas_secondary_mask()

            output = nn_segmentation_from_masks(image, kernel_size, keep, dump)
            ui.scribble.canvas_fill_primary_mask(output)

        def on_open_scribble(checked):
            fwd_open_file_path(ui.scribble.picture_load_from_path, window)

        def on_paint_green(checked):
            ui.scribble.canvas_set_pen_primary()

        def on_paint_red(checked):
            ui.scribble.canvas_set_pen_secondary()

        def on_erase(checked):
            ui.scribble.canvas_set_pen_erase()

        def on_paint_clear(checked):
            ui.scribble.canvas_clear()

        def on_paint_undo(checked):
            ui.scribble.canvas_undo()

        def on_paint_redo(checked):
            ui.scribble.canvas_redo()

        def on_open_merge(checked):
            fwd_open_file_path(ui.merge.picture_load_from_path, window)

        def on_save_merge(checked):
            fwd_save_file_path(ui.merge.export, window)

        ui.open_scribble.triggered.connect(on_open_scribble)
        ui.embed.triggered.connect(on_embed)

        ui.smart_segment.triggered.connect(on_smart_segment)

        ui.paint_green.triggered.connect(on_paint_green)
        ui.paint_red.triggered.connect(on_paint_red)
        ui.erase.triggered.connect(on_erase)
        ui.paint_clear.triggered.connect(on_paint_clear)

        ui.paint_undo.triggered.connect(on_paint_undo)
        ui.paint_redo.triggered.connect(on_paint_redo)

        ui.open_merge.triggered.connect(on_open_merge)
        ui.inpaint.triggered.connect(on_inpaint)
        ui.save_merge.triggered.connect(on_save_merge)
